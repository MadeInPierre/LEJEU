using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace LEJEU.Shared
{
	public static class ResolutionManager
	{
		#region Properties
		/// <summary>
		/// This is the default resolution all game variables are set for animations, Level Editor positions...
		/// It corresponds to a zone's size.
		/// This is used to calculate the general Scale and fit to the user's screen based on the active resolution.
		/// </summary>
		public static Vector2 GameRes;

		/// <summary>
		/// This resolution is only used in GamePlay screen, not in the menus. 
		/// Use the DeviceRes instead in the menus.
		/// </summary>
		public static Vector2 ActiveRes;

		/// <summary>
		/// Keeps the user's monitor resolution in full screen, and the window resolution when in windowed-mode.
		/// </summary>
		public static Vector2 WindowRes;

		/// <summary>
		/// The Active resolutions the game supports. All other resolutions will be changed to the closest in this list.
		/// This is the resolution in which the GamePlay renders. It does not affect the game's Window size.
		/// </summary>
		public static Dictionary<string, Vector2> AvailableResolutions;

		/// <summary>
		/// Active to Game resolution.
		/// This is the general scale between the active resolution and the default coordinates (e.g. generated by the LevelEditor).
		/// </summary>
		public static float InGameScale;

		/// <summary>
		/// Active to Window resolution.
		/// This is the general scale between the active resolution reneder in GamePlay and the window's size (e.g. used in the SpriteBatchs/Camera).
		/// </summary>
		public static float WindowScale;
		#endregion

		public static void Initialize()
		{
			GameRes = new Vector2(1570, 900);


			AvailableResolutions = new Dictionary<string, Vector2>();
			AvailableResolutions.Add("1280x720",  new Vector2(1280, 720 )); // 16:9
			AvailableResolutions.Add("1366x768",  new Vector2(1366, 768 )); // 16:9
			AvailableResolutions.Add("1440x900",  new Vector2(1440, 900 )); // 16:10
			AvailableResolutions.Add("1600x900",  new Vector2(1600, 900 )); // 16:9
			AvailableResolutions.Add("1920x1080", new Vector2(1920, 1080)); // 16:9
			AvailableResolutions.Add("1920x1200", new Vector2(1920, 1200)); // 16:10
			AvailableResolutions.Add("2560x1440", new Vector2(2560, 1440)); // 16:9

			RefreshWindowRes();
			AutoResolution();
		}

		/// <summary>
		/// Automaticly chooses the resolution based off of WindowRes (monitor's/window's res)
		/// </summary>
		public static void AutoResolution()
		{
			SetResolutionToTarget(WindowRes);
		}

		/// <summary>
		/// Give any resolution. The game resolution will be chosen to fit the target withing the AvailableResolutions dictionary.
		/// </summary>
		/// <param name="targetRes">Target res.</param>
		public static void SetResolutionToTarget(Vector2 targetRes)
		{
			if(AvailableResolutions.ContainsValue(targetRes))
				ActiveRes = targetRes;
			else
				foreach (Vector2 optionRes in AvailableResolutions.Values) 
					if(optionRes.Y > targetRes.Y) { ActiveRes = optionRes; goto done; }
			done:
			ActiveRes = new Vector2(1570, 900); //TODO remove.

			ChangeResolution(WindowRes);

			RefreshScale();
		}

		/// <summary>
		/// Gets the resolutions with same aspect ratio than the specified resolution.
		/// </summary>
		/// <returns>The resolutions with same aspect ratio.</returns>
		/// <param name="resolution">Resolution.</param>
		public static List<Vector2> GetResolutionsWithSameAspectRatio(Vector2 resolution)
		{
			List<Vector2> matchingResolutions = new List<Vector2>();

			float originalRatio = resolution.X / resolution.Y;

			foreach(Vector2 v in AvailableResolutions.Values)
				if(v.X / v.Y == originalRatio)
					matchingResolutions.Add(v);

			return matchingResolutions;
		}

		public static void RefreshWindowRes()
		{
			if(Game1.graphics.IsFullScreen)
				 WindowRes = new Vector2(GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width,
										 GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height);
			else WindowRes = new Vector2(GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width  * 3/4,
										 GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height * 3/4);

			ChangeResolution(WindowRes);
			RefreshScale();
		}

		/// <summary>
		/// Change the game's window size to the specified resolution.
		/// </summary>
		/// <param name="newResolution">New resolution.</param>
		public static void ChangeResolution(Vector2 newResolution)
		{
			Game1.graphics.PreferredBackBufferWidth = (int)newResolution.X;
			Game1.graphics.PreferredBackBufferHeight = (int)newResolution.Y;

			Game1.graphics.ApplyChanges();
		}

		public static void RefreshScale()
		{
			InGameScale = ActiveRes.Y / GameRes.Y;
			WindowScale = WindowRes.Y / ActiveRes.Y;
		}


		/// <summary>
		/// Converts the given position (usually corresponding to a position in ActiveRes) to a GameRes position.
		/// </summary>
		/// <returns>The position in GameRes format.</returns>
		/// <param name="position">Position.</param>
		public static Vector2 ConvertToGameCoords(Vector2 position)
		{
			return position / InGameScale; //TODO this is false, it's just the idea.
		}

		/// <summary>
		/// Converts the given position (usually corresponding to a position from the e.g. LevelEditor) to a ActiveRes position.
		/// </summary>
		/// <returns>The position in GameRes format.</returns>
		/// <param name="position">Position.</param>
		public static Vector2 ConvertToActiveResCoords(Vector2 position)
		{
			return position * InGameScale; //TODO this is false, it's just the idea.
		}
	}
}